typedef struct {
   GLubyte *dibujo;
   GLuint bpp;
   GLuint largo;
   GLuint ancho;
   GLuint ID;
}textura;

textura tFondo;


int cargaTGA(char const*nombre, textura *imagen ){
	GLubyte cabeceraTGA[12]={0,0,2,0,0,0,0,0,0,0,0,0};
	GLubyte compararTGA[12];//0,0,2,0,0,0,0,0,0,0,0,0
	
	GLubyte cabecera[6];//244,1,244,1,32,40
	GLuint bytesporpunto;
	GLuint tamanoimagen;
	GLuint temp,i;
	GLuint tipo=GL_RGBA;
	
	
	FILE *archivo= fopen(nombre,"rb");
	if(
	archivo==NULL ||
	fread(compararTGA,1,sizeof(compararTGA),archivo) !=sizeof(compararTGA) ||
	memcmp(cabeceraTGA,compararTGA,sizeof(compararTGA)) != 0 ||
	fread(cabecera,1,sizeof(cabecera),archivo) !=sizeof(cabecera)
	){
	  if(archivo==NULL){
	  	  printf("No se encontro el archivo %s\n",nombre);
	  	  return 0;
	  }	else {
	  	fclose(archivo);
	  	return 0;
	  }
	}
	
	imagen->largo= 256*cabecera[1]+cabecera[0];//(256*1)+244=500
	imagen->ancho=256*cabecera[3]+cabecera[2];//(256*1)+244=500
	
	if(
	imagen->largo <=0 || 
	imagen->ancho <=0 ||
	(cabecera[4] !=24  && cabecera[4] !=32)
	){
		printf("Datos invalidos\n");
		fclose(archivo);
		return 0;
	}
	
	imagen->bpp=cabecera[4];//32
	bytesporpunto=cabecera[4]/8; //32/8=4
	tamanoimagen=imagen->largo * imagen->ancho *bytesporpunto;
	                //500*500*4=1000000
    //1000000 /1024=976.56 =977 kb
    imagen->dibujo =(GLubyte *)malloc(tamanoimagen);
    if(
	imagen->dibujo==NULL ||
	fread(imagen->dibujo,1,tamanoimagen,archivo)!= tamanoimagen
	){
		if(imagen->dibujo !=NULL){
			printf("Error leyendo imagen \n");
			free(imagen->dibujo);
		}
		else{
			printf("Error asignando memoria \n");
		}
		fclose(archivo);
		return 0;
	}
    //TGA:BGRA     RGBA   
	for(i=0;i<(int)tamanoimagen;i+=bytesporpunto){
		temp=imagen->dibujo[i]; //temp<-A
		imagen->dibujo[i]=imagen->dibujo[i+2];//A<- B
		imagen->dibujo[i+2]=temp; // B<-temp		
		
	}
	
	fclose(archivo);
	
	glGenTextures(1,&imagen[0].ID);
	glBindTexture(GL_TEXTURE_2D,imagen[0].ID);
	
	if(imagen->bpp ==24) tipo=GL_RGB;
	glTexImage2D(GL_TEXTURE_2D,0,tipo,imagen[0].ancho,imagen[0].largo,0,tipo,GL_UNSIGNED_BYTE,imagen[0].dibujo);
	
	glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
	return 1;
}


void init(){
	
	GLfloat light_position[]{0,0,0,1};
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0,GL_POSITION,light_position);
	glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
	
	glShadeModel(GL_SMOOTH);//sombras
	glClearColor(0.0,0.0,0.0,0.0);
	glClearDepth(1.0);
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
	glHint(GL_PERSPECTIVE_CORRECTION_HINT,GL_NICEST);
	glEnable(GL_TEXTURE_2D);
	//Carga de Textura

		if(!cargaTGA("zelda4.tga",&tFondo)){
		printf("Error cargando textura\n");
		exit(0);
	}
}

void fondo(){
	
	glDisable(GL_LIGHTING);
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D,tFondo.ID);
	int t=500;
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);glVertex3d(t,t,-t); 
	glTexCoord2f(1.0,0.0);glVertex3d(-t,t,-t);
	glTexCoord2f(1.0,1.0);glVertex3d(-t,-t,-t);
	glTexCoord2f(0.0,1.0);glVertex3d(t,-t,-t);
	glEnd();
	glLoadIdentity();
	
	glDisable(GL_TEXTURE_2D);
	glEnable(GL_LIGHTING);	
}